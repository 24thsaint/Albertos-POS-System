/*
 *  ==++++++++++++++++++++++++++++++++++++++++++++++++++++==
 *  |      CENTRAL PHILIPPINE UNIVERSITY                   |
 *  |      Bachelor of Science in Software Engineering     |
 *  |      Jaro, Iloilo City, Philippines                  |
 *  |                                                      |
 *  |          This program is written by Rave, Â©2015.     |
 *  |          You are free to use and distribute this.    |
 *  |          Reach me at: admin@blackout.biz.tm          |
 *  |                                                      |
 *  |               ~~~"CODE the FUTURE"~~~                |
 *  ==++++++++++++++++++++++++++++++++++++++++++++++++++++==
 */
package com.albertos.displays.menu;

import com.albertos.controllers.exceptions.NonexistentEntityException;
import com.albertos.displays.login.ManagerInterface;
import com.albertos.objects.PizzaMenuManager;
import com.albertos.objects.Pizza;
import java.awt.CardLayout;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityExistsException;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rave Noren Gidor-Sambo Villavicencio-Arevalo
 */
public class MenuManagerInterface extends javax.swing.JFrame {

    private PizzaMenuManager inventory;
    private Long modificationId;
    private final CardLayout card;
    private DefaultTableModel dtm;
    private boolean isNew;
    private DefaultListModel addedList = new DefaultListModel();

    /**
     * Creates new form InventoryDisplay
     */
    public MenuManagerInterface() {
        initComponents();

        DefaultListModel dlm = new DefaultListModel();
        inventory = PizzaMenuManager.getInstance();

        card = (CardLayout) rootPane.getLayout();
        dtm = (DefaultTableModel) resultTable.getModel();        
        addedSelection = new JList(addedList);
        refreshTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        rootPane = new javax.swing.JPanel();
        displayPanel = new javax.swing.JPanel();
        header = new javax.swing.JLabel();
        labelSearch = new javax.swing.JLabel();
        searchKey = new javax.swing.JTextField();
        actionGo = new javax.swing.JButton();
        scrollerPane = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        actionModify = new javax.swing.JButton();
        actionDeleted = new javax.swing.JButton();
        actionAdd = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        modificationsPanel = new javax.swing.JPanel();
        pizzaFieldsPanel = new javax.swing.JPanel();
        labelPizzaName = new javax.swing.JLabel();
        pizzaName = new javax.swing.JTextField();
        labelPizzaDescription = new javax.swing.JLabel();
        descriptionScroller = new javax.swing.JScrollPane();
        pizzaDescription = new javax.swing.JTextArea();
        labelPrice = new javax.swing.JLabel();
        pizzaPrice = new javax.swing.JTextField();
        actionAddPizza = new javax.swing.JButton();
        labelPrice1 = new javax.swing.JLabel();
        pizzaPrice1 = new javax.swing.JTextField();
        actionBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableSelection = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        addedSelection = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchAvailable = new javax.swing.JTextField();
        searchAdded = new javax.swing.JTextField();
        headerSecondPanel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        rootPane.setLayout(new java.awt.CardLayout());

        displayPanel.setBackground(new java.awt.Color(255, 255, 153));

        header.setFont(new java.awt.Font("Century Schoolbook L", 1, 48)); // NOI18N
        header.setForeground(new java.awt.Color(204, 0, 0));
        header.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        header.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/albertos/resources/resize Pizza.png"))); // NOI18N
        header.setText("Albertos Pizza");
        header.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        labelSearch.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 18)); // NOI18N
        labelSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/albertos/resources/filter.png"))); // NOI18N
        labelSearch.setText("Search:");

        searchKey.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchKeyCaretUpdate(evt);
            }
        });
        searchKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchKeyActionPerformed(evt);
            }
        });

        actionGo.setBackground(new java.awt.Color(255, 255, 153));
        actionGo.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        actionGo.setForeground(new java.awt.Color(1, 1, 1));
        actionGo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/albertos/resources/search.png"))); // NOI18N
        actionGo.setText("GO");
        actionGo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        actionGo.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        scrollerPane.setBackground(new java.awt.Color(0, 0, 0));

        resultTable.setBackground(new java.awt.Color(255, 255, 102));
        resultTable.setForeground(new java.awt.Color(0, 0, 0));
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Pizza Name", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.setGridColor(new java.awt.Color(0, 0, 0));
        resultTable.setRowHeight(22);
        resultTable.setSelectionBackground(new java.awt.Color(255, 204, 204));
        resultTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        resultTable.getTableHeader().setReorderingAllowed(false);
        scrollerPane.setViewportView(resultTable);
        if (resultTable.getColumnModel().getColumnCount() > 0) {
            resultTable.getColumnModel().getColumn(0).setMinWidth(50);
            resultTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            resultTable.getColumnModel().getColumn(0).setMaxWidth(50);
            resultTable.getColumnModel().getColumn(1).setResizable(false);
            resultTable.getColumnModel().getColumn(2).setMinWidth(500);
            resultTable.getColumnModel().getColumn(2).setMaxWidth(500);
        }

        actionModify.setBackground(new java.awt.Color(255, 255, 153));
        actionModify.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        actionModify.setForeground(new java.awt.Color(1, 1, 1));
        actionModify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/albertos/resources/book_edit.png"))); // NOI18N
        actionModify.setText("Modify Selected Pizza");
        actionModify.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        actionModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionModifyActionPerformed(evt);
            }
        });

        actionDeleted.setBackground(new java.awt.Color(255, 255, 153));
        actionDeleted.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        actionDeleted.setForeground(new java.awt.Color(1, 1, 1));
        actionDeleted.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/albertos/resources/book_delete.png"))); // NOI18N
        actionDeleted.setText("Delete Selected Pizza");
        actionDeleted.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        actionDeleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionDeletedActionPerformed(evt);
            }
        });

        actionAdd.setBackground(new java.awt.Color(255, 255, 153));
        actionAdd.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        actionAdd.setForeground(new java.awt.Color(1, 1, 1));
        actionAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/albertos/resources/plus.png"))); // NOI18N
        actionAdd.setText("Add New Pizza");
        actionAdd.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        actionAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionAddActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(255, 255, 153));
        cancelButton.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(1, 1, 1));
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/albertos/resources/back.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollerPane)
                    .addGroup(displayPanelLayout.createSequentialGroup()
                        .addComponent(labelSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchKey)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(actionGo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(displayPanelLayout.createSequentialGroup()
                        .addComponent(actionAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actionModify, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actionDeleted, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)))
                .addContainerGap())
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actionGo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchKey, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSearch))
                .addGap(12, 12, 12)
                .addComponent(scrollerPane, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actionModify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(actionAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(actionDeleted, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rootPane.add(displayPanel, "displayCard");

        modificationsPanel.setBackground(new java.awt.Color(255, 255, 153));

        pizzaFieldsPanel.setBackground(new java.awt.Color(255, 255, 102));
        pizzaFieldsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pizzaFieldsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelPizzaName.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        labelPizzaName.setForeground(new java.awt.Color(1, 1, 0));
        labelPizzaName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelPizzaName.setText("Pizza Name");
        pizzaFieldsPanel.add(labelPizzaName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));
        pizzaFieldsPanel.add(pizzaName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 330, 34));

        labelPizzaDescription.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        labelPizzaDescription.setForeground(new java.awt.Color(1, 1, 0));
        labelPizzaDescription.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelPizzaDescription.setText("Description");
        pizzaFieldsPanel.add(labelPizzaDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, -1, -1));

        pizzaDescription.setColumns(20);
        pizzaDescription.setLineWrap(true);
        pizzaDescription.setRows(5);
        pizzaDescription.setWrapStyleWord(true);
        descriptionScroller.setViewportView(pizzaDescription);

        pizzaFieldsPanel.add(descriptionScroller, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 330, 92));

        labelPrice.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        labelPrice.setForeground(new java.awt.Color(1, 1, 0));
        labelPrice.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelPrice.setText("9-inch price");
        pizzaFieldsPanel.add(labelPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 100, 96, -1));
        pizzaFieldsPanel.add(pizzaPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 90, 200, 30));

        actionAddPizza.setBackground(new java.awt.Color(255, 255, 153));
        actionAddPizza.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 14)); // NOI18N
        actionAddPizza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/albertos/resources/plus.png"))); // NOI18N
        actionAddPizza.setText("Add Pizza");
        actionAddPizza.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        actionAddPizza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionAddPizzaActionPerformed(evt);
            }
        });
        pizzaFieldsPanel.add(actionAddPizza, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 440, 170, 50));

        labelPrice1.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        labelPrice1.setForeground(new java.awt.Color(1, 1, 0));
        labelPrice1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelPrice1.setText("11-inch price");
        pizzaFieldsPanel.add(labelPrice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 150, -1, -1));
        pizzaFieldsPanel.add(pizzaPrice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 140, 200, 30));

        actionBack.setBackground(new java.awt.Color(255, 255, 153));
        actionBack.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 14)); // NOI18N
        actionBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/albertos/resources/back.png"))); // NOI18N
        actionBack.setText("Back");
        actionBack.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        actionBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionBackActionPerformed(evt);
            }
        });
        pizzaFieldsPanel.add(actionBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 440, 150, 50));

        availableSelection.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Hotdog", "Ham", "Cheese" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        availableSelection.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(availableSelection);

        pizzaFieldsPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, 250, 169));

        jButton1.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 14)); // NOI18N
        jButton1.setText("Add >>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        pizzaFieldsPanel.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 300, 120, -1));

        jButton2.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 14)); // NOI18N
        jButton2.setText("<< Remove");
        pizzaFieldsPanel.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 330, 120, -1));

        addedSelection.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(addedSelection);

        pizzaFieldsPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 250, 270, 169));

        jLabel2.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(1, 1, 0));
        jLabel2.setText("Available Ingredients");
        pizzaFieldsPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, -1, -1));

        jLabel3.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(1, 1, 0));
        jLabel3.setText("Added Pizza Ingredients");
        pizzaFieldsPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 190, -1, -1));

        searchAvailable.setText("Search");
        searchAvailable.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchAvailableCaretUpdate(evt);
            }
        });
        searchAvailable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchAvailableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchAvailableFocusLost(evt);
            }
        });
        pizzaFieldsPanel.add(searchAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 250, 30));

        searchAdded.setText("Search");
        pizzaFieldsPanel.add(searchAdded, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 210, 270, 30));

        headerSecondPanel.setFont(new java.awt.Font("Century Schoolbook L", 1, 48)); // NOI18N
        headerSecondPanel.setForeground(new java.awt.Color(204, 0, 0));
        headerSecondPanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerSecondPanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/albertos/resources/resize Pizza.png"))); // NOI18N
        headerSecondPanel.setText("Albertos Pizza");
        headerSecondPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout modificationsPanelLayout = new javax.swing.GroupLayout(modificationsPanel);
        modificationsPanel.setLayout(modificationsPanelLayout);
        modificationsPanelLayout.setHorizontalGroup(
            modificationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modificationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modificationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headerSecondPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pizzaFieldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        modificationsPanelLayout.setVerticalGroup(
            modificationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificationsPanelLayout.createSequentialGroup()
                .addComponent(headerSecondPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pizzaFieldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        rootPane.add(modificationsPanel, "modificationsCard");

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 808, Short.MAX_VALUE)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(rootPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 647, Short.MAX_VALUE)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(rootPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jDesktopPane1.setLayer(rootPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchAvailableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchAvailableFocusLost
        searchAvailable.setText("Search");
    }//GEN-LAST:event_searchAvailableFocusLost

    private void searchAvailableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchAvailableFocusGained
        searchAvailable.setText("");
    }//GEN-LAST:event_searchAvailableFocusGained

    private void searchAvailableCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchAvailableCaretUpdate
        for (int i = 0; i < availableSelection.getModel().getSize(); i++) {
            System.out.println(i);
            if (searchAvailable.getText().toUpperCase()
                .contains(availableSelection.getModel().getElementAt(i).toString().toUpperCase())) {
                availableSelection.setSelectedIndex(i);
            }
        }
        System.out.println(availableSelection.getModel().getSize());
    }//GEN-LAST:event_searchAvailableCaretUpdate

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addedList.addElement(availableSelection.getSelectedValue());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void actionBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionBackActionPerformed
        returnToMain();
    }//GEN-LAST:event_actionBackActionPerformed

    private void actionAddPizzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionAddPizzaActionPerformed
        Pizza pizza = new Pizza();
        if (isNew) {
            try {
                inventory.addPizza(
                    this.pizzaName.getText(),
                    this.pizzaDescription.getText(),
                    Double.parseDouble(this.pizzaPrice.getText()),
                    Double.parseDouble(this.pizzaPrice1.getText())
                );
            } catch (EntityExistsException e) {
                JOptionPane.showMessageDialog(
                    null,
                    "Entry creation failed!\n" + e.getMessage(),
                    "Failed",
                    JOptionPane.ERROR_MESSAGE);
                return;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(
                    null,
                    "Entry creation failed: Please check blank fields!\n",
                    "Failed",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(
                    null,
                    "Entry creation failed: Please check blank fields!\n",
                    "Failed",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            }

            JOptionPane.showMessageDialog(
                null,
                "New Pizza menu created successfuly!",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                inventory.getPizzaDataForModification().setName(this.pizzaName.getText());
                inventory.getPizzaDataForModification().setDescription(this.pizzaDescription.getText());
                inventory.getPizzaDataForModification().setNineInchPizzaPrice(Double.parseDouble(this.pizzaPrice.getText()));
                inventory.getPizzaDataForModification().setElevenInchPizzaPrice(Double.parseDouble(this.pizzaPrice1.getText()));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(
                    null,
                    "Entry creation failed: Please check blank fields!\n",
                    "Failed",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(
                    null,
                    "Entry creation failed: Please check blank fields!\n",
                    "Failed",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            }

            try {
                PizzaMenuManager.getController().edit(inventory.getPizzaDataForModification());

                JOptionPane.showMessageDialog(
                    null,
                    "Update successful!",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                    null,
                    "Update failed!\n" + ex.getMessage(),
                    "Success",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
        returnToMain();
    }//GEN-LAST:event_actionAddPizzaActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        ManagerInterface managerInterface = new ManagerInterface();
        managerInterface.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void actionAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionAddActionPerformed
        actionAddPizza.setText("Add Pizza");

        this.pizzaName.setText("");
        this.pizzaDescription.setText("");
        this.pizzaPrice.setText("");
        this.pizzaPrice1.setText("");

        card.show(rootPane, "modificationsCard");
        isNew = true;
    }//GEN-LAST:event_actionAddActionPerformed

    private void actionDeletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionDeletedActionPerformed
        int confirmRequest = JOptionPane.showConfirmDialog(
            null,
            "Are you sure you want to delete the selected Pizza?",
            "Confirm",
            JOptionPane.YES_NO_OPTION);

        if (confirmRequest == JOptionPane.YES_OPTION) {

            String id = (String) resultTable.getValueAt(resultTable.getSelectedRow(), 0);

            try {
                PizzaMenuManager.getController().destroy(Long.parseLong(id));
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(MenuManagerInterface.class.getName()).log(Level.SEVERE, null, ex);
            }

            refreshTable();
        } else {
            //do nothing
        }
    }//GEN-LAST:event_actionDeletedActionPerformed

    private void actionModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionModifyActionPerformed
        if (resultTable.getSelectedRowCount() < 1) {
            JOptionPane.showMessageDialog(
                null,
                "Cannot modify: No pizza selected!",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        actionAddPizza.setText("Save Changes");
        card.show(rootPane, "modificationsCard");
        isNew = false;

        String id = (String) resultTable.getValueAt(resultTable.getSelectedRow(), 0);
        inventory.setPizzaDataForModification(PizzaMenuManager.getController().findPizza(Long.parseLong(id)));

        this.pizzaName.setText(inventory.getPizzaDataForModification().getName());
        this.pizzaDescription.setText(inventory.getPizzaDataForModification().getDescription());
        this.pizzaPrice.setText(inventory.getPizzaDataForModification().getNineInchPizzaPrice() + "");
        this.pizzaPrice1.setText(inventory.getPizzaDataForModification().getElevenInchPizzaPrice() + "");
    }//GEN-LAST:event_actionModifyActionPerformed

    private void searchKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchKeyActionPerformed
        search(searchKey.getText());
    }//GEN-LAST:event_searchKeyActionPerformed

    private void searchKeyCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchKeyCaretUpdate
        search(searchKey.getText());
    }//GEN-LAST:event_searchKeyCaretUpdate

    private void refreshTable() {
        resultTable = new JTable();
        resultTable.setBackground(new java.awt.Color(255, 255, 102));
        resultTable.setForeground(new java.awt.Color(0, 0, 0));
         resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Pizza Name", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.setGridColor(new java.awt.Color(0, 0, 0));
        resultTable.setRowHeight(22);
        resultTable.setSelectionBackground(new java.awt.Color(255, 204, 204));
        resultTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        resultTable.getTableHeader().setReorderingAllowed(false);
        scrollerPane.setViewportView(resultTable);
        if (resultTable.getColumnModel().getColumnCount() > 0) {
            resultTable.getColumnModel().getColumn(0).setMinWidth(50);
            resultTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            resultTable.getColumnModel().getColumn(0).setMaxWidth(50);
            resultTable.getColumnModel().getColumn(1).setResizable(false);
            resultTable.getColumnModel().getColumn(2).setMinWidth(500);
            resultTable.getColumnModel().getColumn(2).setMaxWidth(500);
        }

        List<Pizza> pizzas = PizzaMenuManager.getController().findPizzaEntities();

        dtm = (DefaultTableModel) resultTable.getModel();

        for (Pizza pizza : pizzas) {
            String datum1 = String.valueOf(pizza.getId());
            String datum2 = String.valueOf(pizza.getName());
            String datum3 = String.valueOf(pizza.getDescription());
            String[] data = {datum1, datum2, datum3};

            dtm.addRow(data);
        }
    }

    private void returnToMain() {
        refreshTable();
        card.show(rootPane, "displayCard");
    }

    private void search(String key) {
        if (key.isEmpty()) {
            resultTable.clearSelection();
            return;
        }
        for (int i = 0; i < dtm.getRowCount(); i++) {
            if (dtm.getValueAt(i, 1).toString().toUpperCase().contains(key.toUpperCase())) {
                resultTable.setRowSelectionInterval(i, i);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuManagerInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionAdd;
    private javax.swing.JButton actionAddPizza;
    private javax.swing.JButton actionBack;
    private javax.swing.JButton actionDeleted;
    private javax.swing.JButton actionGo;
    private javax.swing.JButton actionModify;
    private javax.swing.JList addedSelection;
    private javax.swing.JList availableSelection;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane descriptionScroller;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JLabel header;
    private javax.swing.JLabel headerSecondPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelPizzaDescription;
    private javax.swing.JLabel labelPizzaName;
    private javax.swing.JLabel labelPrice;
    private javax.swing.JLabel labelPrice1;
    private javax.swing.JLabel labelSearch;
    private javax.swing.JPanel modificationsPanel;
    private javax.swing.JTextArea pizzaDescription;
    private javax.swing.JPanel pizzaFieldsPanel;
    private javax.swing.JTextField pizzaName;
    private javax.swing.JTextField pizzaPrice;
    private javax.swing.JTextField pizzaPrice1;
    private javax.swing.JTable resultTable;
    private javax.swing.JPanel rootPane;
    private javax.swing.JScrollPane scrollerPane;
    private javax.swing.JTextField searchAdded;
    private javax.swing.JTextField searchAvailable;
    private javax.swing.JTextField searchKey;
    // End of variables declaration//GEN-END:variables
}
